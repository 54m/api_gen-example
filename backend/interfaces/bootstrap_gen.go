// Code generated by server_generator. DO NOT EDIT.
// generated version: 1.7.1

package interfaces

import (
	"io"
	"log"
	"net/http"
	"runtime/debug"

	"github.com/54m/api_gen-example/backend/interfaces/api"
	apiUser "github.com/54m/api_gen-example/backend/interfaces/api/user"
	apiUserUserID "github.com/54m/api_gen-example/backend/interfaces/api/user/_userID"
	"github.com/54m/api_gen-example/backend/interfaces/props"
	"github.com/labstack/echo/v4"
)

// MiddlewareList ...
type MiddlewareList []*MiddlewareSet

// MiddlewareMap ...
type MiddlewareMap map[string][]echo.MiddlewareFunc

// MiddlewareSet ...
type MiddlewareSet struct {
	Path           string
	MiddlewareFunc []echo.MiddlewareFunc
}

// ToMap ...
func (m MiddlewareList) ToMap() MiddlewareMap {
	mf := make(map[string][]echo.MiddlewareFunc)
	for _, middleware := range m {
		mf[middleware.Path] = middleware.MiddlewareFunc
	}
	return mf
}

// Bootstrap ...
func Bootstrap(p *props.ControllerProps, e *echo.Echo, middlewareList MiddlewareList, opts ...io.Writer) {
	if len(opts) > 0 {
		if w := opts[0]; w != nil {
			log.SetOutput(w)
		}
	}

	middleware := middlewareList.ToMap()

	// error handling
	e.Use(func(before echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) (err error) {
			defer func() {
				recoverErr := recover()
				if recoverErr == nil {
					return
				}

				debug.PrintStack()

				if httpErr, ok := recoverErr.(*echo.HTTPError); ok {
					err = c.JSON(httpErr.Code, httpErr.Message)
				}

				err = c.JSON(http.StatusInternalServerError, map[string]interface{}{
					"code":    http.StatusInternalServerError,
					"message": "internal server error.",
				})
			}()

			return before(c)
		}
	})

	rootGroup := e.Group("/")
	setMiddleware(rootGroup, "/", middleware)
	NewRoutes(p, rootGroup, opts...)

	apiGroup := rootGroup.Group("api/")
	setMiddleware(apiGroup, "/api/", middleware)
	api.NewRoutes(p, apiGroup, opts...)

	apiUserGroup := apiGroup.Group("user/")
	setMiddleware(apiUserGroup, "/api/user/", middleware)
	apiUser.NewRoutes(p, apiUserGroup, opts...)

	apiUserUserIDGroup := apiUserGroup.Group(":userID/")
	setMiddleware(apiUserUserIDGroup, "/api/user/:userID/", middleware)
	apiUserUserID.NewRoutes(p, apiUserUserIDGroup, opts...)
}

func setMiddleware(group *echo.Group, path string, list MiddlewareMap) {
	if ms, ok := list[path]; ok {
		for i := range ms {
			group.Use(ms[i])
		}
	}
}
