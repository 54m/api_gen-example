// Code generated by server_generator. DO NOT EDIT.
// generated version: 1.6.1

package user

import (
	"io"
	"log"
	"net/http"

	"github.com/54m/api_gen-example/backend/interfaces/props"
	"github.com/54m/api_gen-example/backend/interfaces/wrapper"
	"github.com/labstack/echo/v4"
)

// Routes ...
type Routes struct {
	router *echo.Group
}

// NewRoutes ...
func NewRoutes(p *props.ControllerProps, router *echo.Group, opts ...io.Writer) *Routes {
	if len(opts) > 0 {
		if w := opts[0]; w != nil {
			log.SetOutput(w)
		}
	}
	r := &Routes{
		router: router,
	}
	router.DELETE(":userID", r.Delete(p))
	router.GET(":userID", r.Get(p))
	router.GET("search", r.GetSearch(p))
	router.PATCH(":userID", r.Patch(p))
	return r
}

// Delete ...
func (r *Routes) Delete(p *props.ControllerProps) echo.HandlerFunc {
	i := NewDeleteController(p)
	return func(c echo.Context) error {
		req := new(DeleteRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/api/user/{userID}): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.Delete(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// Get ...
func (r *Routes) Get(p *props.ControllerProps) echo.HandlerFunc {
	i := NewGetController(p)
	return func(c echo.Context) error {
		req := new(GetRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/api/user/{userID}): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.Get(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// GetSearch ...
func (r *Routes) GetSearch(p *props.ControllerProps) echo.HandlerFunc {
	i := NewGetSearchController(p)
	return func(c echo.Context) error {
		req := new(GetSearchRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/api/user/search): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.GetSearch(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// Patch ...
func (r *Routes) Patch(p *props.ControllerProps) echo.HandlerFunc {
	i := NewPatchController(p)
	return func(c echo.Context) error {
		req := new(PatchRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/api/user/{userID}): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.Patch(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// IDeleteController ...
type IDeleteController interface {
	Delete(c echo.Context, req *DeleteRequest) (res *DeleteResponse, err error)
}

// IGetController ...
type IGetController interface {
	Get(c echo.Context, req *GetRequest) (res *GetResponse, err error)
}

// IGetSearchController ...
type IGetSearchController interface {
	GetSearch(c echo.Context, req *GetSearchRequest) (res *GetSearchResponse, err error)
}

// IPatchController ...
type IPatchController interface {
	Patch(c echo.Context, req *PatchRequest) (res *PatchResponse, err error)
}
