// Code generated by server_generator. DO NOT EDIT.
// generated version: 1.6.1

package api

import (
	"io"
	"log"
	"net/http"

	"github.com/54m/api_gen-example/backend/interfaces/props"
	"github.com/54m/api_gen-example/backend/interfaces/wrapper"
	"github.com/labstack/echo/v4"
)

// Routes ...
type Routes struct {
	router *echo.Group
}

// NewRoutes ...
func NewRoutes(p *props.ControllerProps, router *echo.Group, opts ...io.Writer) *Routes {
	if len(opts) > 0 {
		if w := opts[0]; w != nil {
			log.SetOutput(w)
		}
	}
	r := &Routes{
		router: router,
	}
	router.PUT("user", r.PutUser(p))
	return r
}

// PutUser ...
func (r *Routes) PutUser(p *props.ControllerProps) echo.HandlerFunc {
	i := NewPutUserController(p)
	return func(c echo.Context) error {
		req := new(PutUserRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/api/user): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.PutUser(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// IPutUserController ...
type IPutUserController interface {
	PutUser(c echo.Context, req *PutUserRequest) (res *PutUserResponse, err error)
}
